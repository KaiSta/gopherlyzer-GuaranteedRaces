package race

import (
	"fmt"

	"../util"
	"./graphbuilder"
)

type EventPair struct {
	T1    uint64
	T1Idx int
	T2    uint64
	T2Idx int
}

var debug = false
var debug1 = false

// func Check(first *util.Item, second *util.Item) bool {
// 	start := first        // first access event
// 	finish := second.Prev // one event before the second access event

// 	visited = make(map[*util.Item]struct{})

// 	result, path := search(start, finish, config)
// 	fmt.Println("Path:")
// 	for i := range path {
// 		fmt.Println(path[i])
// 	}

// 	return !result
// }

func swap(x []*util.Item, i, j int) {
	tmp := x[i]
	x[i] = x[j]
	x[j] = tmp
}

type permutation struct {
	items []*util.Item
}

var permutations []permutation

//var valid uint
//var invalid uint

func permute(x []*util.Item, k int) {
	for i := k; i < len(x); i++ {
		swap(x, i, k)
		permute(x, k+1)
		swap(x, k, i)
	}
	if k == len(x)-1 {
		perm := make([]*util.Item, len(x))

		for i := range x {
			perm[i] = x[i]
		}

		if validPerm(permutation{perm}) {
			permutations = append(permutations, permutation{perm})
		}
	}
}

func permuteNoValidate(x []*util.Item, k int, c chan permutation) {
	for i := k; i < len(x); i++ {
		swap(x, i, k)
		permuteNoValidate(x, k+1, c)
		swap(x, k, i)
	}
	if k == len(x)-1 {
		perm := make([]*util.Item, len(x))

		for i := range x {
			perm[i] = x[i]
		}
		c <- permutation{perm}
		//permutations = append(permutations, permutation{perm})
	}
	if k == 0 {
		close(c)
	}
}

func permuteFirst(x []*util.Item) {
	//assume x only contains events from a single channel for the moment
	if len(x) < 2 {
		return
	}
	for i := 1; i < len(x); i++ {
		swap(x, i, i-1)

		perm := make([]*util.Item, len(x))
		for j := range x {
			perm[j] = x[j]
		}
		permutations = append(permutations, permutation{perm})
	}
	swap(x, len(x)-1, 0)
}

func CheckAlternatives(first, second *util.Item, emulatedThreads map[uint64]graphbuilder.Buffer) bool {
	start := first        // first access event
	finish := second.Prev // one event before the second access event
	//valid, invalid = 0, 0
	//visited = make(map[*util.Item]struct{})
	initVisited(start)
	permutations = []permutation{}

	config := make(map[*util.Item]*util.Item)
	sndRcvOrder := make(map[*util.Item]*util.Item)
	for _, c := range emulatedThreads {
		for _, s := range c.Slots {
			for _, ev := range s.Events {
				config[ev] = ev.InternalNext
				sndRcvOrder[ev] = ev.NextSndRcv
			}
		}
	}

	result, path := search(start, finish, config, sndRcvOrder)

	if debug || debug1 {
		fmt.Println("init path:")
		for _, p := range path {
			fmt.Println(p)
		}
		fmt.Println("-----")
	}

	if !result {
		return true
	}

	involvedChans := make(map[uint64]struct{})
	for _, v := range path {
		if v.Ops[0].BufSize > 0 {
			involvedChans[v.Ops[0].Ch] = struct{}{}
		}
	}

	items := make([]*util.Item, 0)
	for k := range involvedChans {
		ch := emulatedThreads[k]
		for i := range ch.Slots {
			for _, it := range ch.Slots[i].Events {
				items = append(items, it)
			}
		}
	}

	permute(items, 0)

	if debug || debug1 {
		fmt.Println("Perms:")
		for i := range permutations {
			for _, v := range permutations[i].items {
				fmt.Println(v)
			}
			fmt.Println("------------------------")
		}
	}

	for _, perm := range permutations {
		emulation := make(map[uint64]graphbuilder.Buffer)
		counter := make(map[uint64]uint32)
		config = make(map[*util.Item]*util.Item)
		lastRcv := make(map[uint64]*util.Item)
		lastSnd := make(map[uint64]*util.Item)
		sndRcvOrder = make(map[*util.Item]*util.Item)

		//feed buffers
		for _, v := range perm.items {
			count := counter[v.Thread]
			bufSlot := count % (v.Ops[0].BufSize)

			ch, ok := emulation[v.Thread] //get ncessary channel
			if !ok {                      //init channel if not done so far
				ch = graphbuilder.Buffer{make([]util.Thread, v.Ops[0].BufSize)}
			}
			slot := ch.Slots[bufSlot] // get the buffer for the current op

			config[v] = nil

			if len(slot.Events) > 0 { //not the first event. link current event as internal next
				config[slot.Events[len(slot.Events)-1]] = v
			}
			slot.Events = append(slot.Events, v) //add current event to the buffer
			ch.Slots[bufSlot] = slot
			emulation[v.Thread] = ch

			if v.Ops[0].Kind&util.SEND > 0 {
				prev := lastSnd[v.Thread]
				if prev != nil {
					sndRcvOrder[prev] = v
				}
				lastSnd[v.Thread] = v
			} else if v.Ops[0].Kind&util.RCV > 0 {
				prev := lastRcv[v.Thread]
				if prev != nil {
					sndRcvOrder[prev] = v
				}
				lastRcv[v.Thread] = v
			}

			count++
			counter[v.Thread] = count
		}
		//visited = make(map[*util.Item]struct{})
		initVisited(start)
		result, path = search(start, finish, config, sndRcvOrder)

		if !result {
			initVisited(second)
			result, path = search(second, first.Prev, config, sndRcvOrder)

			if !result {
				return true
			}
		}
	}

	return false
}

func check(first, second *util.Item, emulatedThreads map[uint64]graphbuilder.Buffer, path []*util.Item, config, sndRcvOrder map[*util.Item]*util.Item, prevperm permutation, retry int) bool {
	start := first        // first access event
	finish := second.Prev // one event before the second access event

	if retry == 3 {
		return true
	}

	initVisited(start)

	sndRcvOrderFromPath := make(map[uint64]map[*util.Item]struct{})
	for _, p := range path {
		if _, ok := emulatedThreads[p.Thread]; ok { //is a buffer event
			order, ok := sndRcvOrderFromPath[p.Thread]
			if !ok {
				order = make(map[*util.Item]struct{}, 0)
			}
			if p.Ops[0].Kind&util.SEND > 0 {
				order[p] = struct{}{}
			} else {
				order[p.Prev] = struct{}{}
			}
			sndRcvOrderFromPath[p.Thread] = order
		}
	}

	if debug || debug1 {
		for k, v := range sndRcvOrderFromPath {
			fmt.Println("rcv order for", k)
			for i := range v {
				fmt.Println(i)
			}
			fmt.Println("-----------")
		}
	}

	items := make([]*util.Item, 0)
	for _, v := range sndRcvOrderFromPath {
		if len(v) < 2 {
			continue
		}

		for x := range v {
			items = append(items, x)
		}
	}

	c := make(chan permutation)
	go permuteNoValidate(items, 0, c)

	jumpedFirst := false
	for perm := range c {
		if !jumpedFirst { //why is this necessary? if we test the same config again, the retry fix should capture to many recursions!?
			jumpedFirst = true
			continue
		}
		if !validPerm2(perm) {
			continue
		}
		perm.items = append(perm.items, prevperm.items...)
		//emulation := make(map[uint64]graphbuilder.Buffer)
		//counter := make(map[uint64]uint32)
		sndRcvOrder = make(map[*util.Item]*util.Item)
		lastRcv := make(map[uint64]*util.Item)
		lastSnd := make(map[uint64]*util.Item)
		config = make(map[*util.Item]*util.Item)
		for _, v := range perm.items {
			config[v] = nil
			config[v.InternalNext] = nil

			//build snd order
			prev := lastSnd[v.Thread]
			if prev != nil {
				sndRcvOrder[prev] = v
			}
			lastSnd[v.Thread] = v

			{
				rcv := v.InternalNext
				prev := lastRcv[v.Thread]
				if prev != nil {
					sndRcvOrder[prev] = rcv
					config[prev] = v //connect prev rcv to current snd so we can move forward to the next operation on this channel
				}
				lastRcv[v.Thread] = rcv
			}
		}

		initVisited(start)
		result, path := search(start, finish, config, sndRcvOrder)
		if debug || debug1 {
			fmt.Println("current path:")
			for _, p := range path {
				fmt.Println(p)
			}
			fmt.Println("-----")
		}

		if !result {
			initVisited(second)
			result, path = search(second, first.Prev, config, sndRcvOrder)

			if !result {
				return true
			}
		}
		if check(first, second, emulatedThreads, path, config, sndRcvOrder, perm, retry+1) {
			return true
		}

	}

	return false
}

func CheckAlternatives2(first, second *util.Item, emulatedThreads map[uint64]graphbuilder.Buffer) bool {
	start := first        // first access event
	finish := second.Prev // one event before the second access event

	initVisited(start)
	permutations = []permutation{}

	config := make(map[*util.Item]*util.Item)
	sndRcvOrder := make(map[*util.Item]*util.Item)
	for _, c := range emulatedThreads {
		for _, s := range c.Slots {
			for _, ev := range s.Events {
				config[ev] = ev.InternalNext
				sndRcvOrder[ev] = ev.NextSndRcv
			}
		}
	}

	result, path := search(start, finish, config, sndRcvOrder)

	if debug || debug1 {
		fmt.Println("init path:")
		for _, p := range path {
			fmt.Println(p)
		}
		fmt.Println("-----")
	}

	if !result {
		return true
	}

	return check(first, second, emulatedThreads, path, config, sndRcvOrder, permutation{make([]*util.Item, 0)}, 0)

	//determine current sender and receiver order using path
	sndRcvOrderFromPath := make(map[uint64][]*util.Item)
	for _, p := range path {
		if _, ok := emulatedThreads[p.Thread]; ok { //is a buffer event
			order, ok := sndRcvOrderFromPath[p.Thread]
			if !ok {
				order = make([]*util.Item, 0)
				current := p
				for current != nil {
					if current.Ops[0].Kind&util.SEND > 0 {
						order = append(order, current)
					} else {
						order = append(order, current.Prev)
					}

					current = sndRcvOrder[current]
				}
				sndRcvOrderFromPath[p.Thread] = order
			}
		}
	}

	if debug || debug1 {
		for k, v := range sndRcvOrderFromPath {
			fmt.Println("rcv order for", k)
			for _, i := range v {
				fmt.Println(i)
			}
			fmt.Println("-----------")
		}
	}

	// involvedChans := make(map[uint64]struct{})
	// for _, v := range path {
	// 	if v.Ops[0].BufSize > 0 {
	// 		involvedChans[v.Ops[0].Ch] = struct{}{}
	// 	}
	// }

	items := make([]*util.Item, 0)
	for _, v := range sndRcvOrderFromPath {
		if len(v) < 2 {
			continue
		}
		for _, x := range v {
			items = append(items, x)
		}
	}
	c := make(chan permutation)
	go permuteNoValidate(items, 0, c)

	if debug || debug1 {
		fmt.Println("Perms:")
		for i := range permutations {
			for _, v := range permutations[i].items {
				fmt.Println(v)
			}
			fmt.Println("------------------------")
		}
	}

	for perm := range c {
		if !validPerm2(perm) {
			continue
		}
		//emulation := make(map[uint64]graphbuilder.Buffer)
		//counter := make(map[uint64]uint32)
		sndRcvOrder = make(map[*util.Item]*util.Item)
		lastRcv := make(map[uint64]*util.Item)
		lastSnd := make(map[uint64]*util.Item)
		config = make(map[*util.Item]*util.Item)
		for _, v := range perm.items {
			// count := counter[v.Thread]
			// bufSlot := count % (v.Ops[0].BufSize)

			// ch, ok := emulation[v.Thread] //get ncessary channel
			// if !ok {                      //init channel if not done so far
			// 	ch = graphbuilder.Buffer{make([]util.Thread, v.Ops[0].BufSize)}
			// }
			// slot := ch.Slots[bufSlot] // get the buffer for the current op

			config[v] = nil
			config[v.InternalNext] = nil

			// if len(slot.Events) > 0 { //not the first event. link current event as internal next
			// 	config[slot.Events[len(slot.Events)-1]] = v
			// }
			// slot.Events = append(slot.Events, v)              //add current event to the buffer
			// slot.Events = append(slot.Events, v.InternalNext) // add the matching rcv event to the buffer
			// ch.Slots[bufSlot] = slot
			// emulation[v.Thread] = ch

			//build snd order
			prev := lastSnd[v.Thread]
			if prev != nil {
				sndRcvOrder[prev] = v
			}
			lastSnd[v.Thread] = v

			{
				rcv := v.InternalNext
				prev := lastRcv[v.Thread]
				if prev != nil {
					sndRcvOrder[prev] = rcv
					config[prev] = v //connect prev rcv to current snd so we can move forward to the next operation on this channel
				}
				lastRcv[v.Thread] = rcv
			}
		}

		initVisited(start)
		result, path = search(start, finish, config, sndRcvOrder)
		if debug || debug1 {
			fmt.Println("current path:")
			for _, p := range path {
				fmt.Println(p)
			}
			fmt.Println("-----")
		}

		if !result {
			initVisited(second)
			result, path = search(second, first.Prev, config, sndRcvOrder)

			if !result {
				return true
			}
		}
	}

	return false
}

var visited map[*util.Item]struct{}

func initVisited(x *util.Item) {
	visited = make(map[*util.Item]struct{})
	// if x.Prev == nil {
	// 	return
	// }
	// curr := x.Prev
	// for curr.Prev != nil {
	// 	visited[curr] = struct{}{}
	// 	curr = curr.Prev
	// }
}

func search(current, finish *util.Item, config, sndRcvOrder map[*util.Item]*util.Item) (bool, []*util.Item) {
	if debug {
		fmt.Println(current)
	}
	visited[current] = struct{}{}
	path := []*util.Item{current}
	if current == finish { //found a way
		return true, path
	}

	if len(current.Next) == 0 && current.InternalNext == nil { //no child nodes
		return false, path
	}

	for i := range current.Next {
		if debug {
			fmt.Println("\tnext", current.Next[i])
		}
		if _, f := visited[current.Next[i]]; !f {
			if debug {
				fmt.Println("external Next")
			}
			if ok, p := search(current.Next[i], finish, config, sndRcvOrder); ok { //external links
				return true, append(path, p...)
			}
		}
	}

	nextRcv, ok2 := sndRcvOrder[current]
	if ok2 {
		if nextRcv != nil {
			if debug {
				fmt.Println("sndRcvOrder")
			}
			if ok, p := search(nextRcv, finish, config, sndRcvOrder); ok {
				return true, append(path, p...)
			}
		}
	}

	internalNext, ok := config[current]
	if ok {
		if internalNext != nil {
			if debug {
				fmt.Println("Internal1")
			}
			if ok, p := search(internalNext, finish, config, sndRcvOrder); ok {
				return true, append(path, p...)
			}
		}
	}
	//there must be a internal next, config does not contain a overwrite for this next, (ok2) it is not a buffer event
	if current.InternalNext != nil && !(ok || ok2) {
		if debug {
			fmt.Println("Internal2")
		}
		if ok, p := search(current.InternalNext, finish, config, sndRcvOrder); ok { //internal links
			return true, append(path, p...)
		}
	}

	return false, nil
}

func validPerm(perm permutation) bool {
	threadidx := make(map[uint64]int)
	chans := make(map[uint64][]int) // for each chan one int per buffer
	scounter := make(map[uint64]uint32)
	rcounter := make(map[uint64]uint32)
	for _, it := range perm.items {
		//no two consecutive sends or receives on the same slot
		count := uint32(0)
		if it.Ops[0].Kind&util.SEND > 0 {
			count = scounter[it.Thread]
		} else if it.Ops[0].Kind&util.RCV > 0 {
			count = rcounter[it.Thread]
		}

		bufSlot := count % it.Ops[0].BufSize
		ch, ok := chans[it.Thread]
		if !ok {
			ch = make([]int, it.Ops[0].BufSize)
		}
		slot := ch[bufSlot]

		if it.Ops[0].Kind&util.SEND > 0 {
			slot++
			if slot > 1 {
				return false
			}
		} else if it.Ops[0].Kind&util.RCV > 0 {
			slot--
			if slot < 0 {
				return false
			}
		}
		ch[bufSlot] = slot
		chans[it.Thread] = ch

		count++
		if it.Ops[0].Kind&util.SEND > 0 {
			scounter[it.Thread] = count
		} else if it.Ops[0].Kind&util.RCV > 0 {
			rcounter[it.Thread] = count
		}

		for _, n := range it.Next {
			// threads are not allowed to overtake themselves
			threadCnt := threadidx[n.Thread]
			if threadCnt <= n.LocalIdx {
				threadidx[n.Thread] = n.LocalIdx
			} else {
				return false
			}
		}
	}
	return true
}

func validPerm2(perm permutation) bool {
	threadidx := make(map[uint64]int)
	for _, it := range perm.items {
		for _, n := range it.Next {
			// threads are not allowed to overtake themselves
			threadCnt := threadidx[n.Thread]
			if threadCnt <= n.LocalIdx {
				threadidx[n.Thread] = n.LocalIdx
			} else {
				return false
			}
		}
	}
	return true
}
